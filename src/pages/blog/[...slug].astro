---
import { Icon } from 'astro-icon/components'
import { getCollection } from 'astro:content'
import Layout from '../../layout/layout.astro'
import { getReadingTime } from '../../utils/reading-time'
import { getDateFormatted } from '../../utils/time-format'
import myImage from '../../assets/bg-meta.jpg'
import Title from '../../components/typo/title.astro'
import Paragraph from '../../components/typo/paragraph.astro'
import Prose from '../../components/typo/prose.astro'
import CopyCode from '../../components/ui/copy-code.astro'

const { post } = Astro.props
const { title, description, pubDate } = post.data
const { Content } = await post.render()
const canonical = 'https://guimox.dev/blog/' + post.slug
const current = 'blog'

export async function getStaticPaths() {
  const posts = await getCollection('posts')
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }))
}
---

<Layout title={title} description={description} canonical={canonical} current={current} image={myImage}>
  <div id="scroll-progress" class="fixed left-0 top-0 z-50 h-1 w-0 bg-zinc-700"></div>
  <article>
    <div class="flex flex-col items-start gap-4 text-base">
      <div class="full flex flex-col gap-4">
        <Title>{title}</Title>
        <Paragraph>{description}</Paragraph>
        <div class="flex gap-3">
          <time class="flex items-center gap-2 tracking-tight">
            <Icon name="mdi:calendar-outline" class="text-color text-lg" />
            <span>{getDateFormatted(pubDate)}</span>
          </time>
          <div class="flex items-center gap-2 tracking-tight">
            <Icon name="mdi:clock-outline" class="text-color text-lg" />
            <span>{getReadingTime(post.body)}</span>
          </div>
        </div>
      </div>
      <div class="bg-color h-[0.5rem] w-10 rounded-sm"></div>
    </div>
    <Prose>
      <Content />
      <CopyCode />
    </Prose>
  </article>
</Layout>

<script>
  let copyButtonLabel = 'Copy'
  let codeBlocks = Array.from(document.querySelectorAll('pre'))

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement('div')
    wrapper.style.position = 'relative'

    let copyButton = document.createElement('button')
    copyButton.className = 'copy-code'
    copyButton.innerHTML = copyButtonLabel

    codeBlock.setAttribute('tabindex', '0')
    codeBlock.appendChild(copyButton)
    codeBlock?.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)

    copyButton.addEventListener('click', async () => {
      await copyCode(codeBlock, copyButton)
    })
  }

  async function copyCode(block: any, button: any) {
    let code = block.querySelector('code')
    let text = code.innerText

    await navigator.clipboard.writeText(text)

    button.innerText = 'Copied'

    setTimeout(() => {
      button.innerText = copyButtonLabel
    }, 700)
  }

  window.addEventListener('scroll', function () {
    const scrollProgress = document.getElementById('scroll-progress')
    if (scrollProgress) {
      const scrollTop = window.scrollY
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight
      const scrollPercentage = (scrollTop / scrollHeight) * 100

      scrollProgress.style.width = scrollPercentage + '%'
    }
  })
</script>
