---
import { Icon } from 'astro-icon/components'
import { getCollection } from 'astro:content'
import Layout from '../../layout/layout.astro'
import { getReadingTime } from '../../utils/reading-time'
import { getDateFormatted } from '../../utils/time-format'
import Title from '../../components/typo/title.astro'
import Paragraph from '../../components/typo/paragraph.astro'
import Prose from '../../components/typo/prose.astro'
import CopyCode from '../../components/ui/copy-code.astro'
import getBlogCollection from '../../lib/getBlogCollection'
import Small from '../../components/typo/small.astro'

const { post } = Astro.props
const { title, description, pubDate } = post.data
const { Content } = await post.render()
const canonical = 'https://guimox.dev/blog/' + post.slug
const current = 'blog'

export async function getStaticPaths() {
  const posts = await getBlogCollection()
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }))
}
---

<Layout title={title} description={description} canonical={canonical} current={current}>
  <div
    id="scroll-progress"
    class="fixed left-0 top-0 z-50 h-1 w-0 bg-gray-300 transition-all duration-150 ease-out dark:bg-zinc-700"
  >
  </div>

  <article>
    <div class="flex flex-col items-start gap-4 text-base">
      <div class="full flex flex-col gap-4">
        <Title>{title}</Title>
        <Paragraph>{description}</Paragraph>
        <div class="flex gap-3">
          <time class="flex items-center gap-2 tracking-tight">
            <Icon
              name="mdi:calendar-outline"
              class="rounded-full bg-gray-100 p-1 text-2xl text-zinc-700 dark:bg-zinc-700 dark:text-white"
            />
            <Small>{getDateFormatted(pubDate)}</Small>
          </time>
          <div class="flex items-center gap-2 tracking-tight">
            <Icon
              name="mdi:clock-outline"
              class="rounded-full bg-gray-100 p-1 text-2xl text-zinc-700 dark:bg-zinc-700 dark:text-white"
            />
            <Small>{getReadingTime(post.body)}</Small>
          </div>
        </div>
      </div>
      <div class="bg-color h-[0.5rem] w-10 rounded-sm"></div>
    </div>
    <Prose>
      <Content />
      <CopyCode />
    </Prose>
  </article>
</Layout>

<style>
  .copy-code {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.25rem 0.5rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border: none;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.2s ease;
    z-index: 10;
  }

  .copy-code:hover {
    background: rgba(0, 0, 0, 0.9);
  }

  pre {
    position: relative;
  }

  pre:hover .copy-code {
    opacity: 1;
  }

  .dark .copy-code {
    background: rgba(255, 255, 255, 0.9);
    color: black;
  }

  .dark .copy-code:hover {
    background: rgba(255, 255, 255, 1);
  }
</style>

<script>
  let copyButtonLabel = 'Copy'
  let codeBlocks = Array.from(document.querySelectorAll('pre'))

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement('div')
    wrapper.style.position = 'relative'

    let copyButton = document.createElement('button')
    copyButton.className = 'copy-code'
    copyButton.innerHTML = copyButtonLabel

    codeBlock.setAttribute('tabindex', '0')
    codeBlock.appendChild(copyButton)
    codeBlock?.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)

    copyButton.addEventListener('click', async () => {
      await copyCode(codeBlock, copyButton)
    })
  }

  async function copyCode(block: any, button: any) {
    let code = block.querySelector('code')
    let text = code.innerText

    await navigator.clipboard.writeText(text)

    button.innerText = 'Copied'

    setTimeout(() => {
      button.innerText = copyButtonLabel
    }, 700)
  }

  window.addEventListener('scroll', function () {
    const scrollProgress = document.getElementById('scroll-progress')
    if (scrollProgress) {
      const scrollTop = window.scrollY
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight
      const scrollPercentage = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0

      scrollProgress.style.width = Math.min(scrollPercentage, 100) + '%'
    }
  })
</script>
